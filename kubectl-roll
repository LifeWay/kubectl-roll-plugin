#!/bin/bash

# check if the namespace command and name were given
if [[ "$1" == "" ]] || [[ "$2" == "" ]]; then
    echo "► No target namespace given"
    exit 0
fi

if [[ "$1" == "namespace" ]] || [[ "$1" == "ns" ]] || [[ "$1" == "-n" ]]; then
    # variables
    namespace="$2"
    cluster=$(kubectl config current-context)

    statefulSets=$(kubectl get statefulsets -n $namespace -o jsonpath="{.items[*].metadata.name}")
    statefulSetArray=( $statefulSets )
    numOfStatefulSets=${#statefulSetArray[@]}
    podsInStatefulSets=$(kubectl get statefulsets -n $namespace -o jsonpath="{.items[*].status.replicas}")

    deployments=$(kubectl get deployments -n $namespace -o jsonpath="{.items[*].metadata.name}")
    deploymentArray=( $deployments )
    numOfDeployments=${#deploymentArray[@]}
    podsInDeployments=$(kubectl get deployments -n $namespace -o jsonpath="{.items[*].status.replicas}")

    daemonSets=$(kubectl get daemonsets -n $namespace -o jsonpath="{.items[*].metadata.name}")
    daemonSetArray=( $daemonSets )
    numOfDaemonsets=${#daemonSetArray[@]}
    podsInDaemonSets=$(kubectl get daemonsets -n $namespace -o jsonpath="{.items[*].status.desiredNumberScheduled}")

    pods=$(kubectl get pods -n $namespace -o jsonpath="{.items[*].metadata.name}")
    podArray=( $pods )
    numOfPods=${#podArray[@]}

    # sum up pods to be restarted
    totalRollingPods=0
    for i in ${podsInStatefulSets[@]}; do
    let totalRollingPods+=$i
    done
    for i in ${podsInDeployments[@]}; do
    let totalRollingPods+=$i
    done
    for i in ${podsInDaemonSets[@]}; do
    let totalRollingPods+=$i
    done

    # check if a valid $seconds argument was passed
    regEx='^[0-9]+$'
    if [[ "$3" == "" ]]; then
        seconds=5
    elif ! [[ "$3" =~ $regEx ]]; then
        echo "► Invalid seconds argument. Canceling operation..."
        exit 1
    else
        seconds=$3
    fi

    # summary before run
    dateStart=$(date +'%a %b %d %r %Z %Y')
    summary="► Rolling namespace $namespace in cluster $cluster"
    echo "► Started: $dateStart"
    echo $summary

    # main run
    counter=0
    for i in $statefulSets; do
        let counter=counter+1
        kubectl -n $namespace rollout restart statefulset $i
        if [[ $totalNum != $counter ]]; then
            sleep $seconds
        fi
    done

    for i in $deployments; do
        let counter=counter+1
        kubectl -n $namespace rollout restart deployments $i
        if [[ $totalNum != $counter ]]; then
            sleep $seconds
        fi
    done

    for i in $daemonSets; do
        let counter=counter+1
        kubectl -n $namespace rollout restart daemonsets $i
        if [[ $totalNum != $counter ]]; then
            sleep $seconds
        fi
    done

    # conclusion summary
    dateEnd=$(date +'%a %b %d %r %Z %Y')
    if [[ "$numOfPods" == "$totalRollingPods" ]]; then
        echo "All pods in namespace $namespace were scheduled to be restarted"
    elif (( $numOfPods < $totalRollingPods )); then
        echo "ERROR: More pods were restarted than expected"
    else
        numMissedPods=$(( $numOfPods - $totalRollingPods ))
        echo "► WARNING: $numMissedPods pods in namespace $namespace were not restarted"
    fi
    echo "► Ended: $dateEnd"
    exit 0
fi

echo "► No action performed"
